clc;
clear;

% Load the feature database
load ciri_database

% Read and preprocess the input image
img = rgb2gray(imread('input_image.jpg'));

% Calculate GLCM and its properties for the input image
pixel_dist = 1;
GLCM = graycomatrix(img, 'Offset', [0 pixel_dist; -pixel_dist pixel_dist; -pixel_dist 0; -pixel_dist -pixel_dist]);
stats = graycoprops(GLCM, {'contrast', 'correlation', 'energy', 'homogeneity'});
Contrast = stats.Contrast;
Correlation = stats.Correlation;
Energy = stats.Energy;
Homogeneity = stats.Homogeneity;

% Create the feature vector for the input image
ciri_test = [Contrast, Correlation, Energy, Homogeneity];

% Initialize the distance array
total_images = size(ciri_database, 1);
distance = zeros(total_images, 1);

% Calculate the Euclidean distance between the input features and the database features
for i = 1:total_images
    distance(i) = mean(sqrt(sum((ciri_test - ciri_database(i, :)).^2)));
end

% Find the minimum distance and corresponding class
[~, hasil] = min(distance);

% Class labels corresponding to your dataset
class_labels = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'space', 'nothing', 'del'};


% Determine the class based on the minimum distance
kelas = class_labels{hasil};

% Display the classification result
disp(['The input image is classified as: ', kelas]);
